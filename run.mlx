%% This file contains only the code part for run file
-----------------------------------------
ECON 310: Dynamic Macroeconomics - Problem Set 2
Vu Thi Khanh Ngoc - 220174 
Spring 2025
Fulbright University Vietnam
Part I: Modeling Households in Vietnam
Set up the directory
clc;
clear;
close all;
Plot age specific income graph for each age
% Load raw Gt
Gt_bin = prepare_income("household_data.csv");
% Plot full Gt profile
my_graph.plot_gt(Gt_bin);
Run the stimulation for baseline model
if length(Gt_bin.AgeBin) >= 2
    Gt_interp = interp1(Gt_bin.AgeBin, Gt_bin.Gt, 0:60, 'linear', 'extrap');
else
    error('Insufficient age bins for interpolation.');
end

% Setup model
par = model.setup();
par.Gt = Gt_interp(:);  % length = 61
par = model.gen_grids(par);

% Solve and simulate
sol = solve.lc(par);
sim = simulate.lc(par, sol);
Policy functions for consumption and wealth for the baseline model
my_graph.plot_policy(par, sol, sim);
Life cycle profiles of consumption and wealth for baseline model
% Run baseline model
sol = solve.lc(par);
sim = simulate.lc(par, sol);
my_graph.plot_lifecycle_profiles(par, sim, 'Baseline Model');
Model for different values of β and γ
%% Part 1: Vary beta (gamma = 2.00)
gamma_fixed = 2.00;
betas = [0.90, 0.92, 0.94, 0.96];
avg_c_beta = cell(length(betas), 1);
avg_a_beta = cell(length(betas), 1);

for i = 1:length(betas)
    par = model.setup();
    par.beta = betas(i);
    par.sigma = gamma_fixed;
    par = model.gen_grids(par);
    sol = solve.lc(par);
    sim = simulate.lc(par, sol);
    [avg_c, avg_a] = my_graph.average_profiles(par, sim);
    avg_c_beta{i} = avg_c;
    avg_a_beta{i} = avg_a;
end

% Plot results
my_graph.plot_multiple_profiles(par, avg_c_beta, betas, '$\beta$', 'Consumption');
my_graph.plot_multiple_profiles(par, avg_a_beta, betas, '$\beta$', 'Wealth');

% Plot results
my_graph.plot_multiple_profiles(par, avg_c_beta, betas, '$\beta$', 'Consumption');
my_graph.plot_multiple_profiles(par, avg_a_beta, betas, '$\beta$', 'Wealth');


%% Part 2: Vary gamma (beta = 0.96)
beta_fixed = 0.96;
gammas = [2.00, 3.00, 4.00, 5.00];
avg_c_gamma = cell(length(gammas), 1);
avg_a_gamma = cell(length(gammas), 1);

for j = 1:length(gammas)
    par = model.setup();
    par.beta = beta_fixed;
    par.sigma = gammas(j);
    par = model.gen_grids(par);
    sol = solve.lc(par);
    sim = simulate.lc(par, sol);
    [avg_c, avg_a] = my_graph.average_profiles(par, sim);
    avg_c_gamma{j} = avg_c;
    avg_a_gamma{j} = avg_a;
end

% Plot results
my_graph.plot_multiple_profiles(par, avg_c_gamma, gammas, '$\gamma$', 'Consumption');
my_graph.plot_multiple_profiles(par, avg_a_gamma, gammas, '$\gamma$', 'Wealth');
%% Part 3: Heatmap (vary both beta and gamma)
betas_heat = [0.90, 0.92, 0.94, 0.96];
gammas_heat = [2.00, 3.00, 4.00, 5.00];
avg_wealth_matrix = zeros(length(betas_heat), length(gammas_heat));

for i = 1:length(betas_heat)
    for j = 1:length(gammas_heat)
        par = model.setup();
        par.beta = betas_heat(i);
        par.sigma = gammas_heat(j);
        par = model.gen_grids(par);
        sol = solve.lc(par);
        sim = simulate.lc(par, sol);
        avg_wealth = mean(sim.asim(:), 'omitnan');
        avg_wealth_matrix(i, j) = avg_wealth;
    end
end

% Plot heatmap
my_graph.plot_heatmap(avg_wealth_matrix, betas_heat, gammas_heat);

Extended model: Model with education factor
The representative household lives up to age:

% Load raw Gₜ (Age-Income Only)
[Gt_bin, Edist, Gt_matrix] = prepare_income("household_data.csv");
Life cycle profiles of consumption and wealth with education-included model
% Interpolate Gₜ for simulation (ages 0–60) - Education Model
age_grid = 0:60;
Gt_interp = interp1(Gt_bin.AgeBin, Gt_bin.Gt, age_grid, 'linear', 'extrap');

% Setup the model parameters for the education-enhanced model
par = model.setup();
par.Gt = Gt_interp(:);  % Ensure Gt has 61 elements
par.Gt_matrix = Gt_matrix;
par.age_bins = Gt_bin.AgeBin;
par.Edist = Edist;
par = model.gen_grids(par);  % Generate asset grid

% Run education-enhanced model
sol = solve.lc(par);
sim = simulate.lc_edu(par, sol);
my_graph.plot_lifecycle_profiles(par, sim, 'Education-Enhanced Model');
%% Part 1: Vary beta (gamma = 2.00), four separate graphs
gamma_fixed = 2.00;
betas = [0.90, 0.92, 0.94, 0.96];

for i = 1:length(betas)
    par = model.setup();
    par.beta = betas(i);
    par.sigma = gamma_fixed;
    par.Gt = Gt_interp(:);        
    par.Gt_matrix = Gt_matrix;    
    par.age_bins = Gt_bin.AgeBin; 
    par.Edist = Edist;            
    par = model.gen_grids(par);   
    sol = solve.lc(par);
    sim = simulate.lc_edu(par, sol);
    [avg_c, avg_a] = my_graph.average_profiles(par, sim);

    % Plot consumption profile for each beta
    figure;
    plot(0:par.T-1, avg_c, 'b-', 'LineWidth', 2);
    title(['Consumption Profile (γ = ', num2str(gamma_fixed), ', β = ', num2str(betas(i)), ')']);
    xlabel('Age');
    ylabel('Average Consumption');
    grid on;

    % Plot wealth profile for each beta
    figure;
    plot(0:par.T-1, avg_a, 'g-', 'LineWidth', 2);
    title(['Wealth Profile (γ = ', num2str(gamma_fixed), ', β = ', num2str(betas(i)), ')']);
    xlabel('Age');
    ylabel('Average Wealth');
    grid on;
end
%% Part 2: Vary gamma (beta = 0.96), four separate graphs
beta_fixed = 0.96;
gammas = [2.00, 3.00, 4.00, 5.00];

for j = 1:length(gammas)
    par = model.setup();
    par.beta = beta_fixed;
    par.sigma = gammas(j);
    par.Gt = Gt_interp(:);        
    par.Gt_matrix = Gt_matrix;    
    par.age_bins = Gt_bin.AgeBin; 
    par.Edist = Edist;            
    par = model.gen_grids(par);   
    sol = solve.lc(par);
    sim = simulate.lc_edu(par, sol);
    [avg_c, avg_a] = my_graph.average_profiles(par, sim);

    % Plot consumption profile for each gamma
    figure;
    plot(0:par.T-1, avg_c, 'b-', 'LineWidth', 2);
    title(['Consumption Profile (β = ', num2str(beta_fixed), ', γ = ', num2str(gammas(j)), ')']);
    xlabel('Age');
    ylabel('Average Consumption');
    grid on;

    % Plot wealth profile for each gamma
    figure;
    plot(0:par.T-1, avg_a, 'g-', 'LineWidth', 2);
    title(['Wealth Profile (β = ', num2str(beta_fixed), ', γ = ', num2str(gammas(j)), ')']);
    xlabel('Age');
    ylabel('Average Wealth');
    grid on;
end
%% Part 3: Heatmap (vary both beta and gamma)
betas_heat = [0.90, 0.92, 0.94, 0.96];
gammas_heat = [2.00, 3.00, 4.00, 5.00];
avg_wealth_matrix = zeros(length(betas_heat), length(gammas_heat));

for i = 1:length(betas_heat)
    for j = 1:length(gammas_heat)
        par = model.setup();
        par.beta = betas_heat(i);
        par.sigma = gammas_heat(j);
        par.Gt = Gt_interp(:);        
        par.Gt_matrix = Gt_matrix;    
        par.age_bins = Gt_bin.AgeBin; 
        par.Edist = Edist;            
        par = model.gen_grids(par);   
        sol = solve.lc(par);
        sim = simulate.lc_edu(par, sol);
        avg_wealth = mean(sim.asim(:), 'omitnan');
        avg_wealth_matrix(i, j) = avg_wealth;
    end
end
% Plot heatmap of average wealth
my_graph.plot_heatmap(avg_wealth_matrix, betas_heat, gammas_heat);
Compare the summary statistics and other features in the actual and stimulated data
% Load actual data 
actual_data = readtable('household_data.csv');

% Compute ages
actual_data.AgeBin = floor(actual_data.Age / 5) * 5;

% Group by age bins and variables
actual_stats = varfun(@mean, actual_data, 'InputVariables', {'Income', 'Consumption', 'Wealth'}, ...
                      'GroupingVariables', 'AgeBin');
actual_stats.Var_Consumption = varfun(@var, actual_data, 'InputVariables', {'Consumption'}, ...
                                      'GroupingVariables', 'AgeBin');

% Calculate ratios
actual_stats.ConsumptionToIncome = actual_stats.mean_Consumption ./ actual_stats.mean_Income;
actual_stats.WealthToIncome = actual_stats.mean_Wealth ./ actual_stats.mean_Income;

% Display the result
disp('Actual Data Summary Statistics:');
disp(actual_stats);
% Extract statistics from the simulated data
age_bins = 0:60; % Age range

sim_stats = table(age_bins', 'VariableNames', {'AgeBin'});

% Compute Mean and Variance for Simulated Data
sim_stats.Mean_Consumption = mean(sim.csim, 2, 'omitnan');
sim_stats.Mean_Wealth = mean(sim.asim, 2, 'omitnan');
sim_stats.Mean_Income = mean(sim.ysim, 2, 'omitnan');
sim_stats.Var_Consumption = var(sim.csim, 0, 2, 'omitnan');

% Calculate Ratios
sim_stats.ConsumptionToIncome = sim_stats.Mean_Consumption ./ sim_stats.Mean_Income;
sim_stats.WealthToIncome = sim_stats.Mean_Wealth ./ sim_stats.Mean_Income;

% Display
disp('Simulated Data Summary Statistics:');
disp(sim_stats);
figure;
subplot(2,1,1);
plot(actual_stats.AgeBin, actual_stats.mean_Consumption, '-o', 'DisplayName', 'Actual Consumption');
hold on;
plot(sim_stats.AgeBin, sim_stats.Mean_Consumption, '-x', 'DisplayName', 'Simulated Consumption');
xlabel('Age');
ylabel('Consumption');
title('Life Cycle Profile of Consumption');
legend;
grid on;

subplot(2,1,2);
plot(actual_stats.AgeBin, actual_stats.mean_Wealth, '-o', 'DisplayName', 'Actual Wealth');
hold on;
plot(sim_stats.AgeBin, sim_stats.Mean_Wealth, '-x', 'DisplayName', 'Simulated Wealth');
xlabel('Age');
ylabel('Wealth');
title('Life Cycle Profile of Wealth');
legend;
grid on;
figure;
subplot(2,1,1);
plot(actual_stats.AgeBin, actual_stats.ConsumptionToIncome, '-o', 'DisplayName', 'Actual');
hold on;
plot(sim_stats.AgeBin, sim_stats.ConsumptionToIncome, '-x', 'DisplayName', 'Simulated');
xlabel('Age');
ylabel('Consumption-to-Income Ratio');
title('Comparison of Consumption-to-Income Ratio');
legend;
grid on;

subplot(2,1,2);
plot(actual_stats.AgeBin, actual_stats.WealthToIncome, '-o', 'DisplayName', 'Actual');
hold on;
plot(sim_stats.AgeBin, sim_stats.WealthToIncome, '-x', 'DisplayName', 'Simulated');
xlabel('Age');
ylabel('Wealth-to-Income Ratio');
title('Comparison of Wealth-to-Income Ratio');
legend;
grid on;
